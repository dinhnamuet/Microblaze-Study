#ifndef __OLED_H__
#define __OLED_H__

#include "def_config.h"

#define OLED_WIDTH 128
#define OLED_HEIGHT 64
#define FONT_X	6

#define OLED_SET_CONTRAST_CTRL				0x81
#define OLED_ENTIRE_DISPLAY_RAM				0xA4
#define OLED_ENTIRE_DISPLAY_IGNORE_RAM		0xA5
#define OLED_SET_NORMAL_DISPLAY				0xA6
#define OLED_SET_INVERSE_DISPLAY			0xA7
#define OLED_SET_DISPLAY_OFF				0xAE
#define OLED_SET_DISPLAY_ON					0xAF
#define OLED_SET_MEM_ADDR_MODE				0x20
#define OLED_SET_COLUMN_ADDR				0x21
#define OLED_SET_PAGE_ADDR					0x22
#define OLED_SET_SEG0_COL0					0xA0
#define OLED_SET_SEG0_COL127				0xA1
#define OLED_SET_MUX_RATIO					0xA8
#define OLED_SET_COM_NORMAL_MODE			0xC0
#define OLED_SET_COM_REMAP_MODE				0xC8
#define OLED_SET_DISPLAY_OFFSET				0xD3
#define OLED_SET_DISPLAY_CLK_DIVIDE			0xD5
#define OLED_SET_PRECHARGE_PERIOD			0xD9
#define OLED_SET_VCOMH_DESELECT_LV			0xDB

const u8 oled_font[][FONT_X] = {
		{0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // space
		{0x00, 0x00, 0x2f, 0x00, 0x00, 0x00}, // !
		{0x00, 0x07, 0x00, 0x07, 0x00, 0x00}, // "
		{0x14, 0x7f, 0x14, 0x7f, 0x14, 0x00}, // #
		{0x24, 0x2a, 0x7f, 0x2a, 0x12, 0x00}, // $
		{0x23, 0x13, 0x08, 0x64, 0x62, 0x00}, // %
		{0x36, 0x49, 0x55, 0x22, 0x50, 0x00}, // &
		{0x00, 0x05, 0x03, 0x00, 0x00, 0x00}, // '
		{0x00, 0x1c, 0x22, 0x41, 0x00, 0x00}, // (
		{0x00, 0x41, 0x22, 0x1c, 0x00, 0x00}, // )
		{0x14, 0x08, 0x3E, 0x08, 0x14, 0x00}, // *
		{0x08, 0x08, 0x3E, 0x08, 0x08, 0x00}, // +
		{0x00, 0x00, 0xA0, 0x60, 0x00, 0x00}, // ,
		{0x08, 0x08, 0x08, 0x08, 0x08, 0x00}, // -
		{0x00, 0x60, 0x60, 0x00, 0x00, 0x00}, // .
		{0x20, 0x10, 0x08, 0x04, 0x02, 0x00}, // /
		{0x3E, 0x51, 0x49, 0x45, 0x3E, 0x00}, // 0
		{0x00, 0x42, 0x7F, 0x40, 0x00, 0x00}, // 1
		{0x42, 0x61, 0x51, 0x49, 0x46, 0x00}, // 2
		{0x21, 0x41, 0x45, 0x4B, 0x31, 0x00}, // 3
		{0x18, 0x14, 0x12, 0x7F, 0x10, 0x00}, // 4
		{0x27, 0x45, 0x45, 0x45, 0x39, 0x00}, // 5
		{0x3C, 0x4A, 0x49, 0x49, 0x30, 0x00}, // 6
		{0x01, 0x71, 0x09, 0x05, 0x03, 0x00}, // 7
		{0x36, 0x49, 0x49, 0x49, 0x36, 0x00}, // 8
		{0x06, 0x49, 0x49, 0x29, 0x1E, 0x00}, // 9
		{0x00, 0x36, 0x36, 0x00, 0x00, 0x00}, // :
		{0x00, 0x56, 0x36, 0x00, 0x00, 0x00}, // ;
		{0x08, 0x14, 0x22, 0x41, 0x00, 0x00}, // <
		{0x14, 0x14, 0x14, 0x14, 0x14, 0x00}, // =
		{0x00, 0x41, 0x22, 0x14, 0x08, 0x00}, // >
		{0x02, 0x01, 0x51, 0x09, 0x06, 0x00}, // ?
		{0x32, 0x49, 0x59, 0x51, 0x3E, 0x00}, // @
		{0x7C, 0x12, 0x11, 0x12, 0x7C, 0x00}, // A
		{0x7F, 0x49, 0x49, 0x49, 0x36, 0x00}, // B
		{0x3E, 0x41, 0x41, 0x41, 0x22, 0x00}, // C
		{0x7F, 0x41, 0x41, 0x22, 0x1C, 0x00}, // D
		{0x7F, 0x49, 0x49, 0x49, 0x41, 0x00}, // E
		{0x7F, 0x09, 0x09, 0x09, 0x01, 0x00}, // F
		{0x3E, 0x41, 0x49, 0x49, 0x7A, 0x00}, // G
		{0x7F, 0x08, 0x08, 0x08, 0x7F, 0x00}, // H
		{0x00, 0x41, 0x7F, 0x41, 0x00, 0x00}, // I
		{0x20, 0x40, 0x41, 0x3F, 0x01, 0x00}, // J
		{0x7F, 0x08, 0x14, 0x22, 0x41, 0x00}, // K
		{0x7F, 0x40, 0x40, 0x40, 0x40, 0x00}, // L
		{0x7F, 0x02, 0x0C, 0x02, 0x7F, 0x00}, // M
		{0x7F, 0x04, 0x08, 0x10, 0x7F, 0x00}, // N
		{0x3E, 0x41, 0x41, 0x41, 0x3E, 0x00}, // O
		{0x7F, 0x09, 0x09, 0x09, 0x06, 0x00}, // P
		{0x3E, 0x41, 0x51, 0x21, 0x5E, 0x00}, // Q
		{0x7F, 0x09, 0x19, 0x29, 0x46, 0x00}, // R
		{0x46, 0x49, 0x49, 0x49, 0x31, 0x00}, // S
		{0x01, 0x01, 0x7F, 0x01, 0x01, 0x00}, // T
		{0x3F, 0x40, 0x40, 0x40, 0x3F, 0x00}, // U
		{0x1F, 0x20, 0x40, 0x20, 0x1F, 0x00}, // V
		{0x3F, 0x40, 0x38, 0x40, 0x3F, 0x00}, // W
		{0x63, 0x14, 0x08, 0x14, 0x63, 0x00}, // X
		{0x07, 0x08, 0x70, 0x08, 0x07, 0x00}, // Y
		{0x61, 0x51, 0x49, 0x45, 0x43, 0x00}, // Z
		{0x00, 0x7F, 0x41, 0x41, 0x00, 0x00}, // [
		{0x55, 0xAA, 0x55, 0xAA, 0x55, 0x00}, // Backslash (Checker pattern)
		{0x00, 0x41, 0x41, 0x7F, 0x00, 0x00}, // ]
		{0x04, 0x02, 0x01, 0x02, 0x04, 0x00}, // ^
		{0x40, 0x40, 0x40, 0x40, 0x40, 0x00}, // _
		{0x00, 0x03, 0x05, 0x00, 0x00, 0x00}, // `
		{0x20, 0x54, 0x54, 0x54, 0x78, 0x00}, // a
		{0x7F, 0x48, 0x44, 0x44, 0x38, 0x00}, // b
		{0x38, 0x44, 0x44, 0x44, 0x20, 0x00}, // c
		{0x38, 0x44, 0x44, 0x48, 0x7F, 0x00}, // d
		{0x38, 0x54, 0x54, 0x54, 0x18, 0x00}, // e
		{0x08, 0x7E, 0x09, 0x01, 0x02, 0x00}, // f
		{0x18, 0xA4, 0xA4, 0xA4, 0x7C, 0x00}, // g
		{0x7F, 0x08, 0x04, 0x04, 0x78, 0x00}, // h
		{0x00, 0x44, 0x7D, 0x40, 0x00, 0x00}, // i
		{0x40, 0x80, 0x84, 0x7D, 0x00, 0x00}, // j
		{0x7F, 0x10, 0x28, 0x44, 0x00, 0x00}, // k
		{0x00, 0x41, 0x7F, 0x40, 0x00, 0x00}, // l
		{0x7C, 0x04, 0x18, 0x04, 0x78, 0x00}, // m
		{0x7C, 0x08, 0x04, 0x04, 0x78, 0x00}, // n
		{0x38, 0x44, 0x44, 0x44, 0x38, 0x00}, // o
		{0xFC, 0x24, 0x24, 0x24, 0x18, 0x00}, // p
		{0x18, 0x24, 0x24, 0x18, 0xFC, 0x00}, // q
		{0x7C, 0x08, 0x04, 0x04, 0x08, 0x00}, // r
		{0x48, 0x54, 0x54, 0x54, 0x20, 0x00}, // s
		{0x04, 0x3F, 0x44, 0x40, 0x20, 0x00}, // t
		{0x3C, 0x40, 0x40, 0x20, 0x7C, 0x00}, // u
		{0x1C, 0x20, 0x40, 0x20, 0x1C, 0x00}, // v
		{0x3C, 0x40, 0x30, 0x40, 0x3C, 0x00}, // w
		{0x44, 0x28, 0x10, 0x28, 0x44, 0x00}, // x
		{0x1C, 0xA0, 0xA0, 0xA0, 0x7C, 0x00}, // y
		{0x44, 0x64, 0x54, 0x4C, 0x44, 0x00}, // z
		{0x00, 0x10, 0x7C, 0x82, 0x00, 0x00}, // {
		{0x00, 0x00, 0xFF, 0x00, 0x00, 0x00}, // |
		{0x00, 0x82, 0x7C, 0x10, 0x00, 0x00}, // }
		{0x00, 0x06, 0x09, 0x09, 0x06, 0x00}	// ~ (Degrees)
};

typedef enum {
	OLED_COMMAND,
	OLED_DATA
} oled_mode_t;

struct __attribute__((packed)) oled {
	struct spidev *spi;
	struct gpio *gpio;
	u32 vbat;
	u32 vdd;
	u32 rst;
	u32 dc;
	u8 *frame_buffer;
	u8 current_x;
	u8 current_y;
};

int oled_init(struct oled *oled);
int oled_powerup(struct oled *oled);
int oled_powerdown(struct oled *oled);
void oled_reset(struct oled *oled);
void oled_write(struct oled *oled, const u8 data, oled_mode_t mode);
void oled_burst_write(struct oled *oled, const u8 *data, size_t size, oled_mode_t mode);
int oled_clear(struct oled *oled);
int oled_goto_xy(struct oled *oled, u8 x, u8 y);
int oled_send_char(struct oled *oled, const char c);
int oled_send_string(struct oled *oled, const char *str, size_t size);
int oled_next_line(struct oled *oled);
int oled_sync(struct oled *oled);

#endif
